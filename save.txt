
# This is an #inglued <> generated CMakeLists.txt (https://github.com/header-only/inglued)
# To modify it edit CMakeLists.txt.tpl ( i.e. Generate it with `inglued cmaketpl` )


# This is an #inglued <> template !
#
# The template is processed by http://mustache.github.io/, more info about
# syntax here : http://mustache.github.io/mustache.5.html 
#
# You can access the following variables : 
# * libsearpc : github organization name
# * libsearpc : current project name
# *  : current project srcs folder.
# *  : when no .cpp file to link INTERFACE library otherwise empty
# * "../../../lib/searpc-client.c" "../../../lib/searpc-named-pipe-transport.c" "../../../lib/searpc-server.c" "../../../lib/searpc-utils.c"  : space separated list of .cpp file to link to the library 
#
# *  : all deps direct and transitive 
#   -  : The cmake package name from the cmake_package_map otherwise: libsearpc
#   -  : The cmake target name from cmake_package_map otherwise: ::
#   - libsearpc : the github organization name
#   -  : the dependency repository name
#   -  : tag or branch wished for the dep
#   -  : the path you specified in deps/inglued -I
#   -  : same as above but with a guaranteed end slash.
#

cmake_minimum_required(VERSION 3.17.0)

##### PLATFORM deps #####
set(HUNTER_ROOT "/Users/luclambour/.tipi/platform/6b9afd6")
include(HunterGate)
HunterGate(
    URL "unused" 
    SHA1 "unused" 
)
##### PLATFORM deps #####

project(libsearpc_libsearpc VERSION "0.0.1")
enable_testing()

# Compile with shipped-with headers or without 
option(INGLUED "Enable use of #inglued shipped with dependencies." ON)
option(TIPI_LIB_ONLY "Only installs the lib, don't build anything else." OFF)

# Compile unit tests
option(UNIT_TESTS "Enable Unit Testing" OFF)


# Warning as errors to ensure libsearpc quality
string(TOUPPER "${CMAKE_CXX_COMPILER_ID}" COMPILER_IN_USE)
if ("${COMPILER_IN_USE}" STREQUAL "GNU" OR "${COMPILER_IN_USE}" MATCHES "CLANG")
	add_definitions(
    -Wall
		#-Werror
		-Wno-unused-local-typedefs
		-Wno-unused-variable
  )
endif()

include("/Users/luclambour/workspace/exp/libsearpc/vcpkg_test/glib/scripts/buildsystems/vcpkg.cmake")

find_package(PkgConfig)
pkg_search_module(GLIB2 REQUIRED glib-2.0 IMPORTED_TARGET)

find_package(Threads)

  hunter_add_package(jansson COMPONENTS )

  find_package(jansson  REQUIRED )






# Define library
add_library(libsearpc  "../../../lib/searpc-client.c" "../../../lib/searpc-named-pipe-transport.c" "../../../lib/searpc-server.c" "../../../lib/searpc-utils.c" )
add_library(libsearpc_libsearpc::libsearpc ALIAS libsearpc)

target_include_directories(libsearpc BEFORE PUBLIC 
  $<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/../../..> 
$<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/../../../lib> 
  $<INSTALL_INTERFACE:${include_install_dir}/>)

#

target_link_libraries(libsearpc  
  PkgConfig::GLIB2
    jansson::jansson 
  
  ${CMAKE_THREAD_LIBS_INIT}
)

set(include_install_dir "include")

if (NOT TIPI_LIB_ONLY)




endif()

if (NOT TIPI_LIB_ONLY)
endif()


# Installing

# Layout. This works for all platforms:
#   * <prefix>/lib/cmake/<PROJECT-NAME>
#   * <prefix>/lib/
#   * <prefix>/include/
set(config_install_dir "lib/cmake/${PROJECT_NAME}")

set(generated_dir "${CMAKE_CURRENT_BINARY_DIR}/generated")

# Configuration
set(version_config "${generated_dir}/${PROJECT_NAME}ConfigVersion.cmake")
set(project_config "${generated_dir}/${PROJECT_NAME}Config.cmake")
set(targets_export_name "${PROJECT_NAME}Targets")
set(namespace "${PROJECT_NAME}::")

# Include module with fuction 'write_basic_package_version_file'
include(CMakePackageConfigHelpers)

# Configure '<PROJECT-NAME>ConfigVersion.cmake'
# Note: PROJECT_VERSION is used as a VERSION
write_basic_package_version_file(
    "${version_config}" COMPATIBILITY SameMajorVersion
)

# Configure '<PROJECT-NAME>Config.cmake'
# Use variables:
#   * targets_export_name
#   * PROJECT_NAME
configure_package_config_file(
    "cmake/modules/Config.cmake.in"
    "${project_config}"
    INSTALL_DESTINATION "${config_install_dir}"
)


# Targets:
install(
    TARGETS libsearpc
    EXPORT "${targets_export_name}"
    LIBRARY DESTINATION "lib"
    ARCHIVE DESTINATION "lib"
    RUNTIME DESTINATION "bin"
    INCLUDES DESTINATION "${include_install_dir}"
)

# Headers:
install(
    DIRECTORY ../../../
    DESTINATION "${include_install_dir}"
    FILES_MATCHING PATTERN "*.[ih]*"
     PATTERN "/deps/*" EXCLUDE 
 PATTERN "/build/*" EXCLUDE 
 PATTERN "/.tipi/*" EXCLUDE 
 PATTERN "/.git/*" EXCLUDE 
 PATTERN "/doc/*" EXCLUDE 
 PATTERN "/node_modules/*" EXCLUDE 
)
install(
    DIRECTORY ../../../lib/
    DESTINATION "${include_install_dir}"
    FILES_MATCHING PATTERN "*.[ih]*"
     PATTERN "/deps/*" EXCLUDE 
 PATTERN "/build/*" EXCLUDE 
 PATTERN "/.tipi/*" EXCLUDE 
 PATTERN "/.git/*" EXCLUDE 
 PATTERN "/doc/*" EXCLUDE 
 PATTERN "/node_modules/*" EXCLUDE 
)



# Config
#   * <prefix>/lib/cmake/libsearpc/libsearpcConfig.cmake
#   * <prefix>/lib/cmake/libsearpc/libsearpcConfigVersion.cmake
#   * <prefix>/lib/cmake/libsearpc/libsearpcTargets.cmake
install(
    FILES "${project_config}" "${version_config}"
    DESTINATION "${config_install_dir}"
)
install(
    EXPORT "${targets_export_name}"
    NAMESPACE "${namespace}"
    DESTINATION "${config_install_dir}"
)

